{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","index.js"],"names":["intitialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Card","_ref","id","email","name","react_default","a","createElement","className","alt","src","concat","CardList","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","setState","Component","Header","App","onSearchChange","event","target","value","onRequestRobots","_this$props","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","payload","fetch","response","json","data","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d7dc1cc4.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst intitialStateSearch ={\n    searchField : ''\n}\n// returns a new state to the app in general because the old state can't be rewritten\nexport const searchRobots = (state = intitialStateSearch, action = {}) =>{\n    switch (action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state,{searchField:action.payload});\n        default:\n        return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots:[],\n    error:''\n}\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state;\n\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nconst Card = ({id , email ,name}) =>{\n    return(\n        <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\nconst CardList = ({robots}) =>{ \n    \n    return (<div>\n        {robots.map((user, i)=>\n    {\n        return (<Card \n            key ={robots[i].id} \n            id ={robots[i].id} \n            name = {robots[i].name} \n            email= {robots[i].email}>\n            </Card>)\n    })}\n        </div>)\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) =>{\nreturn(\n    <div className = 'pa2'>\n    <input \n    className = 'pa3 ba b--green bg-lightest-blue'\n    type= 'search' \n    placeholder ='search robots'\n    onChange = {searchChange}></input>\n    </div>\n)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>\n{\n return (\n     <div style = {{overflow: 'scroll', border: '5px solid black', height: '500px'}}>\n         {props.children}\n     </div>\n );\n};\n\nexport default Scroll;","import React, {Component} from 'react'\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props)\n        this.state = {hasError: false }\n    }\n\n    componentDidCatch(){\n        this.setState({hasError: true});\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1> Error has occured </h1>\n        }\n        return this.props.children\n    }\n}\nexport default ErrorBoundry;\n","import React, {Component} from \"react\";\n\nclass Header extends Component {\n\n    shouldComponentUpdate(){\n        return false;\n    }\n    \n    render(){\n        console.log('Header');\n        return <h1 className = 'f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header; ","import React ,{Component} from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport {connect} from 'react-redux'\nimport {setSearchField, requestRobots} from '../actions';\nimport Header from '../components/Header';\n\nconst mapStateToProps = state =>\n{\n    return {\n        searchField:state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => \n        dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => requestRobots(dispatch)\n    }\n}\n\nclass App extends Component{\n    \n\n    onSearchChange = (event) =>\n    {\n        this.setState({searchfield: event.target.value})\n        \n    }\n\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const {searchField,onSearchChange,robots,isPending} =this.props;       \n        console.log('SearchField',searchField)\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase()); \n        })\n        return isPending ?\n            (<h1>Loading</h1>):     \n        (\n                <div className = 'tc'>\n                    <Header/>\n                    <SearchBox searchChange = {onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                    <CardList robots = {filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n        )  \n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = (text) => (\n    {\n        type:CHANGE_SEARCH_FIELD,\n        payload:text\n    }\n)\n\nexport const requestRobots = (dispatch) =>{\n    dispatch({type : REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response =>{return response.json();})\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,payload: error}))\n\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {searchRobots,requestRobots} from './reducers';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n// if (process.env.NODE_ENV !== 'production') {\n//   const {whyDidYouUpdate} = require('why-did-you-update');\n//   whyDidYouUpdate(React);\n// }\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobots});\n// add logger to apply middle ware to enable flux logging.\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\n\nReactDOM.render((\n<Provider store = {store}>\n<App/>\n</Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.register();\n"],"sourceRoot":""}